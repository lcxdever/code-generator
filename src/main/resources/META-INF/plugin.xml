<idea-plugin>
    <id>com.roc.code-generator</id>
    <name>Roc Code</name>
    <vendor email="lcxdever@gmail.com" url="https://github.com/lcxdever/code-generator">Roc</vendor>
    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="201.0" />

    <description>
        <![CDATA[
            It is used to improve coding efficiency.
            <br/>
            Automatically generate code or documents according to the predetermined template.
            </br><br>
            Features：
            </br>
            <ol>
                <li>Generate Mockito or Powermock unit test templates</li>
                <li>Generate markdown documents according to java interface methods</li>
                <li>Generate markdown documents according to java controller methods</li>
                <li>Generate JSON eg. data according to java class</li>
                <li>Generate constants field according to java field</li>
            </ol>
            Usage:
            <br/>
            <ol>
                <li>Unit Test: open the class and right-click to select "Generate..." -> "Unit Test"</li>
                <li>Markdown Doc: open the interface or controller class,
                    <br/>
                    move the cursor to the method that needs to generate the document,
                    <br/>
                    and right-click to select "Generate..." -> "Markdown Doc"
                </li>
                <li>JSON eg. Data: open the class and right-click to select "Generate..." -> "JSON"</li>
                <li>Constants Field: open the class and right-click to select "Generate..." -> "Constants Field"</li>
            </ol>
            用于提升编码效率，按照预定模板自动生成代码或文档。
            <br/><br>
            特性:
            <br/>
            <ol>
                <li>实现了 Mockito、Powermock 单元测试模板生成</li>
                <li>实现了根据接口方法，生成 Markdown 文档</li>
                <li>实现了根据 Controller 方法，生成 Markdown 文档</li>
                <li>实现了根据 Java 类，生成 JSON 示例数据</li>
                <li>实现了根据 Java 字段，生成静态常量字段</li>
            </ol>
            <br/>
            其他说明：
            <ul>
                <li>Markdown 文档中的示例数据生成，支持配置，选择"Preferences" -> "Roc Code" -> "Markdown Doc"，
                    <br/>可以指定字段的默认值
                </li>
                <li>上面的配置同样应用到 JSON 示例数据的生成</li>
                <li>支持根据注解信息：@Length @Size @Range @Min @Max 在文档中自动追加描述信息</li>
            </ul>
            <br/>
            用法:
            <br/>
            <ol>
                <li>单元测试：打开待测试的类，右键选择"Generate..." -> "Unit Test"</li>
                <li>Markdown文档：打开接口或者 Controller 类，将光标移动到需要生成文档的方法，
                    <br/>右键选择"Generate..." -> "Markdown Doc"
                </li>
                <li>JSON 示例数据：打开类，将光标移动到需要生成 JSON 示例数据的类，右键选择"Generate..." -> "JSON"</li>
                <li>常量字段：打开类，将光标移动到需要生成常量字段的类，右键选择"Generate..." -> "Constants Field"</li>
            </ol>
            动图展示（GIF）：
            <br/>
            生成单元测试模板（generate unit test）：
            <br/>
            <img src="https://plugins.jetbrains.com/files/18692/screenshot_0634cc29-17ca-4b14-96b5-90a76702d674"/>
            <br/>
            生成接口方法 markdown 文档（generate method markdown）：
            <br/>
            <img src="https://plugins.jetbrains.com/files/18692/screenshot_66396bdc-c686-4a81-869f-32e028b5119d"/>
            <br/>
            生成 Controller 类方法 markdown 文档（generate controller class markdown）：
            <br/>
            <img src="https://plugins.jetbrains.com/files/18692/screenshot_e963f656-80ee-448e-b73a-da6c6e1e5631"/>
            <br/>
            生成 java 类字段常量（generate constants according to class fields）：
            <br/>
            <img src="https://plugins.jetbrains.com/files/18692/screenshot_b53bbe02-20d0-4160-ae47-646630e433ed"/>
            <br/>
            生成 java 类 JSON 示例数据（generate JSON data according to java class）：
            <br/>
            <img src="https://plugins.jetbrains.com/files/18692/screenshot_4167e12a-f513-4958-bbda-916773f2ae24"/>
            <br/>
        ]]>
    </description>

    <change-notes>
        <![CDATA[
            <h3>1.7-SNAPSHOT</h3>
            <ul>
                <li>modify support version -> 2020.1+</li>
                <li>修改支持的版本号 -> 2020.1+</li>
            </ul>
            <h3>1.6-SNAPSHOT</h3>
            <ul>
                <li>optimize markdown document structure</li>
                <li>increase the generation of eg. data</li>
                <li>increase JSON eg. data according to java class</li>
                <li>优化了 Markdown 文档的输出结构</li>
                <li>增加了 Markdown 文档示例数据的生成</li>
                <li>增加了基于 Java 类的 JSON 示例数据生成</li>
            </ul>
            <h3>1.5-SNAPSHOT</h3>
            <ul>
                <li>support generate markdown according to controller class method</li>
                <li>支持基于 controller 方法的 markdown 文档生成</li>
            </ul>
        ]]>
    </change-notes>
    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.java</depends>

    <extensionPoints>
        <extensionPoint name="testFramework" interface="com.roc.generator.unittest.TestFramework" />
        <extensionPoint name="mdAnnotationFormatter" interface="com.roc.generator.javadoc.MdAnnotationFormatter" />
    </extensionPoints>

    <extensions defaultExtensionNs="com.roc.code-generator">
        <!-- TestFramework 扩展-->
        <testFramework implementation="com.roc.generator.unittest.impl.Mockito"/>
        <testFramework implementation="com.roc.generator.unittest.impl.PowerMock"/>
        <!-- MdAnnotationFormatter 扩展-->
        <mdAnnotationFormatter implementation="com.roc.generator.javadoc.impl.AnnoMin"/>
        <mdAnnotationFormatter implementation="com.roc.generator.javadoc.impl.AnnoMax"/>
        <mdAnnotationFormatter implementation="com.roc.generator.javadoc.impl.AnnoLength"/>
        <mdAnnotationFormatter implementation="com.roc.generator.javadoc.impl.AnnoRange"/>
        <mdAnnotationFormatter implementation="com.roc.generator.javadoc.impl.AnnoSize"/>
    </extensions>

    <extensions defaultExtensionNs="com.intellij">
        <!-- 提示信息扩展-->
<!--        <notificationGroup id="md_doc_generator_notification" displayType="BALLOON"/>-->
<!--        <notificationGroup id="generator_json_notification" displayType="BALLOON"/>-->
        <notification.group id="md_doc_generator_notification"/>
        <notification.group id="generator_json_notification"/>

        <!-- 配置信息扩展 -->
        <applicationService serviceImplementation="com.roc.generator.setting.PluginSettingState"/>
        <applicationConfigurable parentId="other" id="com.roc.generator.setting.Parent" displayName="Roc Code"
                                 instance="com.roc.generator.setting.RocCodeConfigurable">
            <configurable id="com.roc.generator.setting.MdDocGenerateConfigurable"
                          instance="com.roc.generator.setting.MdDocGenerateConfigurable" displayName="Markdown Doc"/>
        </applicationConfigurable>
    </extensions>

    <actions>
        <action id="roc_generate_unit_test" class="com.roc.generator.unittest.CreateTestAction" text="Unit Test"
                description="Generate unit test">
            <add-to-group group-id="GenerateGroup" anchor="first" />
        </action>
        <action id="roc_generate_filed_const" class="com.roc.generator.fieldconst.GenerateFieldConstAction"
                text="Field Constants">
            <add-to-group group-id="GenerateGroup" anchor="after" relative-to-action="roc_generate_unit_test"/>
        </action>
        <action id="roc_generate_json" class="com.roc.generator.json.GenerateJsonAction"
                text="JSON">
            <add-to-group group-id="GenerateGroup" anchor="after" relative-to-action="roc_generate_filed_const"/>
        </action>
        <action id="roc_generate_md_doc" class="com.roc.generator.javadoc.MdDocGenerateAction"
                text="Markdown Doc">
            <add-to-group group-id="GenerateGroup" anchor="after" relative-to-action="roc_generate_json"/>
        </action>
    </actions>
</idea-plugin>